package com.ezen.myProject.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ezen.myProject.domain.CommentVO;
import com.ezen.myProject.service.CommentService;

import lombok.extern.slf4j.Slf4j;

@RequestMapping("/comment/*")
@RestController //mapping을 get,post외에 put,delete를 사용하려면 RestController을 사용해야 함
@Slf4j
public class CommentController {
	
	@Inject
	private CommentService csv;
	
	//ResponseEntity 객체 사용
	//@RequestBody : body값 추출 
	//value="mapping name", consumes : 가져오는 데이터의 형태, produces : 보내는 데이터의 형식 / 나가는 데이터 타입 : MediaType.
	//json : application/json  text : text_plain
	@PostMapping(value = "/post", consumes = "application/json", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> post(@RequestBody CommentVO cvo){
						//내보낼 값의 형태
		log.info(">>>>> cvo : "+cvo);
		//DB연결
		int isOk = csv.post(cvo);
		//리턴시 response의 통신상태를 같이 리턴
		return isOk > 0 ? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	
	@GetMapping(value="/{bno}", produces = MediaType.APPLICATION_JSON_VALUE) //들어오는 값 없음
	public ResponseEntity<List<CommentVO>> spread(@PathVariable("bno") int bno){
		log.info(">>>>> Comment List bno >> "+bno);
		//DB요청
		List<CommentVO> list = csv.getList(bno);
		
		return new ResponseEntity<List<CommentVO>>(list, HttpStatus.OK);
	}
	
	@PutMapping(value="/{cno}")
	public ResponseEntity<String> edit(){
	//ResponseEntity : 내가 보내는 리턴타입
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

















