package com.ezen.myProject.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.myProject.domain.BoardVO;
import com.ezen.myProject.domain.FileVO;
import com.ezen.myProject.domain.PagingVO;
import com.ezen.myProject.handler.FileHandler;
import com.ezen.myProject.handler.PagingHandler;
import com.ezen.myProject.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j //log
@RequestMapping("/board/*")
@Controller
public class BoardController {
	@Inject //객체를 생성해주는 것, BoardService bsv = new BoardService();
	private BoardService bsv;
	
	@Inject
	private FileHandler fhd;

	//화면을 띄어주는 get
	@GetMapping("/register")  
	public String boardRegisterGet() {
		return "/board/register"; //destpage, .jsp는 자동으로 붙이도록 설정했음.
	}
	
//	@PostMapping("/register")
//	public String register(BoardVO bvo) {
//		log.info(">>>>> "+bvo.toString());
//		int isOk = bsv.register(bvo);
//		log.info(">>>>> board register "+(isOk>0? "성공" : "실패"));
//		return "redirect:/board/list";
//	}
	
	//파일 포함 게시물 등록
	@PostMapping("/register")
	public String register(BoardVO bvo, 
			@RequestParam(name="files", required = false)MultipartFile[] files) { 
		//@RequestParam:물음표로 달고오는 애를 받을 때, required(필수여부)=false : 해당 파라미터가 없어도 예외가 발생하지 않음.
		log.info(">>>>> bvo >>> "+bvo.toString());
		log.info(">>>>> files >>> "+files);
		List<FileVO> flist = null;
		//flist에 파일 객체 담기
		flist = fhd.uploadFiles(files);
		
//		int isOk = bsv.register(bvo);
//		log.info(">>>>> board register "+(isOk>0? "성공" : "실패"));
		return "redirect:/board/list";
	}
	
	@GetMapping("/list")
	public String list(Model model, PagingVO pgvo) { //Model객체 -> getAttribute해줌
		log.info(">>>> PagingVO >>> "+pgvo);
		
		//1. getList(pgvo) 수정
		List<BoardVO> list = bsv.getList(pgvo);
		//log.info(">>>>> getList >>> "+list.get(0));
		model.addAttribute("list", list); //addAttribute = setAttribute
		
		//2.등록
		int totalCount = bsv.getTotalCount(pgvo);
		PagingHandler ph = new PagingHandler(pgvo, totalCount);
		model.addAttribute("ph", ph);
		
		return "/board/list";
	}
	
	@GetMapping({"/detail", "/modify"})
	public void detail(Model model, @RequestParam("bno")int bno) { //void = 온 곳으로 가라는 뜻
		log.info(">>>>> detail bno >> "+bno);
		
//		//readCount +1
//		int isOk = bsv.readCount(bno);
//		log.info(">>>>> board readcount "+(isOk>0? "성공" : "실패"));
		
		//detail페이지 불러오기
		BoardVO bvo = bsv.getDetail(bno);
		model.addAttribute("bvo", bvo);	
	}
	
	//수정할 때 들어가는 부당 read_count 2개 빼주기
	@PostMapping("/modify")
	public String modify(BoardVO bvo, RedirectAttributes reAttr) {
		log.info(">>>>> "+bvo);
		int isOk = bsv.modify(bvo);
		log.info(">>>>> board modify "+(isOk>0? "성공" : "실패"));
		return "redirect:/board/detail?bno="+bvo.getBno(); //detail에 업데이트된 데이터를 달고 가라
		//reAttr.addFlashAttribute(null, reAttr) => 1회성임
	}
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno")int bno, RedirectAttributes reAttr) {
		log.info(">>>>> remove bno >> "+bno);
		
		int isOk = bsv.remove(bno);
		log.info(">>>>> board remove "+(isOk>0? "성공" : "실패"));
		reAttr.addFlashAttribute("isOk", isOk);
		return "redirect:/board/list"; //redirect = 해당 페이지를 한번 더 타라는 뜻
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
